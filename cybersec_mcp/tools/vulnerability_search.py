"""
Simple vulnerability search tool using NIST NVD API with Pydantic models.
"""

import logging
from typing import List, Optional
from pydantic import BaseModel
from langchain_core.tools import BaseTool
import httpx
from config.settings import settings
import asyncio

logger = logging.getLogger(__name__)


class CVEResult(BaseModel):
    """Individual CVE result"""
    cve_id: str
    description: str
    severity: str = "UNKNOWN"
    cvss_score: float = 0.0
    published_date: str


class VulnerabilitySearchResponse(BaseModel):
    """Response model for vulnerability search"""
    status: str = "success"
    query: str
    total_results: int
    results: List[CVEResult]
    error: Optional[str] = None


class VulnerabilitySearchTool(BaseTool):
    """Tool for searching vulnerability databases like NIST NVD"""
    name: str = "vulnerability_search"
    description: str = "Search for vulnerabilities by CVE ID, product name, or technology."

    def __init__(self, **data):
        super().__init__(**data)
        """Initialize NIST NVD client"""
        self.api_key = settings.nist_api_key
        # API key is optional for NVD but recommended for higher rate limits
        if not self.api_key:
            logger.warning("NIST_API_KEY not set, using anonymous access (rate limited)")

        self.base_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
        self.client = httpx.AsyncClient()

    def _run(
        self,
        query: str,
        severity_filter: Optional[List[str]] = None,
        date_range: Optional[str] = None,
        limit: int = 10
    ) -> VulnerabilitySearchResponse:
        """Search for vulnerabilities in NIST NVD."""
        return asyncio.run(self.search(query, severity_filter, date_range, limit))

    async def _arun(
        self,
        query: str,
        severity_filter: Optional[List[str]] = None,
        date_range: Optional[str] = None,
        limit: int = 10
    ) -> VulnerabilitySearchResponse:
        """Search for vulnerabilities in NIST NVD."""
        return await self.search(query, severity_filter, date_range, limit)

    async def search(
        self,
        query: str,
        severity_filter: Optional[List[str]] = None,
        date_range: Optional[str] = None,
        limit: int = 10
    ) -> VulnerabilitySearchResponse:
        """
        Search for vulnerabilities in NIST NVD.
        
        Args:
            query: Search query (product name or CVE ID)
            severity_filter: Filter by severity ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW']
            date_range: Filter by date ('week', 'month', 'year')
            limit: Maximum results
            
        Returns:
            VulnerabilitySearchResponse with typed results
        """
        try:
            # Build request
            params = {"resultsPerPage": min(limit, 20)}
            headers = {}
            
            if self.api_key:
                headers["apiKey"] = self.api_key
            
            # Check if searching for specific CVE
            if query.upper().startswith("CVE-"):
                params["cveId"] = query.upper()
            else:
                params["keywordSearch"] = query
            
            # Make request
            response = await self.client.get(self.base_url, params=params, headers=headers)
            
            if response.status_code != 200:
                return VulnerabilitySearchResponse(
                    status="error",
                    query=query,
                    total_results=0,
                    results=[],
                    error=f"API error: {response.status_code}"
                )
            
            # Parse results
            data = response.json()
            vulnerabilities = data.get("vulnerabilities", [])
            
            cve_results = []
            for vuln in vulnerabilities:
                cve = vuln.get("cve", {})
                
                # Extract basic info
                cve_id = cve.get("id", "")
                description = cve.get("descriptions", [{}])[0].get("value", "")
                if len(description) > 200:
                    description = description[:200] + "..."
                
                # Get CVSS score and severity
                severity, cvss_score = self._extract_cvss(cve.get("metrics", {}))
                
                # Apply severity filter
                if severity_filter and severity not in severity_filter:
                    continue
                
                # Create CVE result
                cve_result = CVEResult(
                    cve_id=cve_id,
                    description=description,
                    severity=severity,
                    cvss_score=cvss_score,
                    published_date=cve.get("published", "")[:10]
                )
                cve_results.append(cve_result)
            
            return VulnerabilitySearchResponse(
                query=query,
                total_results=len(cve_results),
                results=cve_results
            )
                
        except Exception as e:
            logger.error(f"Search error: {str(e)}")
            return VulnerabilitySearchResponse(
                status="error",
                query=query,
                total_results=0,
                results=[],
                error=str(e)
            )
    
    def _extract_cvss(self, metrics: dict) -> tuple[str, float]:
        """Extract CVSS score and severity from metrics"""
        # Try CVSS v3.1 first
        if "cvssMetricV31" in metrics:
            cvss_data = metrics["cvssMetricV31"][0]["cvssData"]
            return (
                cvss_data.get("baseSeverity", "UNKNOWN"),
                cvss_data.get("baseScore", 0.0)
            )
        
        # Try CVSS v3.0
        if "cvssMetricV30" in metrics:
            cvss_data = metrics["cvssMetricV30"][0]["cvssData"]
            return (
                cvss_data.get("baseSeverity", "UNKNOWN"),
                cvss_data.get("baseScore", 0.0)
            )
        
        return "UNKNOWN", 0.0